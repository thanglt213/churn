import streamlit as st
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import plotly.express as px

# ===== C·∫•u h√¨nh giao di·ªán =====
st.set_page_config(
    page_title="D·ª± ƒëo√°n kh√°ch h√†ng r·ªùi b·ªè",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.sidebar.title("üìÇ Menu")

st.title("üîç D·ª± ƒëo√°n kh√°ch h√†ng r·ªùi b·ªè ng√¢n h√†ng")

# ===== Gi·∫£i th√≠ch d·ªØ li·ªáu =====
with st.expander("üìñ Gi·∫£i th√≠ch c√°c tr∆∞·ªùng d·ªØ li·ªáu"):
    st.markdown("""
    | Tr∆∞·ªùng | M√¥ t·∫£ |
    |--------|-------|
    | `age` | Tu·ªïi |
    | `gender` | Gi·ªõi t√≠nh (`Male`, `Female`) |
    | `tenure` | S·ªë nƒÉm g·∫Øn b√≥ |
    | `balance` | S·ªë d∆∞ t√†i kho·∫£n |
    | `num_txn_30d` | Giao d·ªãch 30 ng√†y g·∫ßn nh·∫•t |
    | `avg_txn_amt` | S·ªë ti·ªÅn trung b√¨nh m·ªói giao d·ªãch |
    | `has_credit_card` | C√≥ th·∫ª t√≠n d·ª•ng (1/0) |
    | `num_complaints` | S·ªë l·∫ßn khi·∫øu n·∫°i |
    | `is_active` | (t·ª± t√≠nh): 1 n·∫øu c√≥ giao d·ªãch |
    | `churned` | 1 = r·ªùi b·ªè, 0 = gi·ªØ l·∫°i |
    """)

# ===== D·ªØ li·ªáu m·∫´u =====
@st.cache_data
def load_train_data():
    return pd.DataFrame({
        'customer_id': ['C1001', 'C1002', 'C1003', 'C1004', 'C1005', 'C1006'],
        'age': [45, 29, 34, 60, 40, 50],
        'gender': ['Male', 'Female', 'Male', 'Female', 'Female', 'Male'],
        'tenure': [6, 2, 4, 7, 3, 10],
        'balance': [12000, 200, 5000, 30000, 0, 20000],
        'num_txn_30d': [15, 5, 12, 2, 0, 20],
        'avg_txn_amt': [80, 25, 45, 300, 10, 100],
        'has_credit_card': [1, 1, 0, 1, 1, 1],
        'num_complaints': [0, 1, 0, 3, 0, 0],
        'churned': [0, 1, 0, 1, 1, 0]
    })

@st.cache_data
def load_predict_data():
    return pd.DataFrame({
        'customer_id': ['C2001', 'C2002', 'C2003'],
        'age': [38, 62, 41],
        'gender': ['Male', 'Female', 'Female'],
        'tenure': [3, 5, 1],
        'balance': [3000, 100, 0],
        'num_txn_30d': [8, 2, 0],
        'avg_txn_amt': [40, 15, 8],
        'has_credit_card': [1, 1, 0],
        'num_complaints': [0, 1, 0]
    })

# ===== Upload d·ªØ li·ªáu hu·∫•n luy·ªán =====
use_custom_train = st.checkbox("üõ†Ô∏è D√πng d·ªØ li·ªáu hu·∫•n luy·ªán t·ª´ CSV")

if use_custom_train:
    train_file = st.file_uploader("T·∫£i file CSV hu·∫•n luy·ªán", type="csv", key="train_csv")
    if train_file is not None:
        df_train_raw = pd.read_csv(train_file)
        st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu hu·∫•n luy·ªán.")
    else:
        st.warning("‚ö†Ô∏è Ch∆∞a t·∫£i file. D√πng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh.")
        df_train_raw = load_train_data()
else:
    df_train_raw = load_train_data()

st.subheader("üìö D·ªØ li·ªáu hu·∫•n luy·ªán (g·ªëc)")
st.dataframe(df_train_raw)

# ===== Ti·ªÅn x·ª≠ l√Ω b·∫£n sao =====
df_train = df_train_raw.copy()
if 'gender' in df_train.columns:
    df_train['gender'] = df_train['gender'].map({'Male': 0, 'Female': 1})
if 'num_txn_30d' in df_train.columns:
    df_train['is_active'] = df_train['num_txn_30d'].apply(lambda x: 1 if x > 0 else 0)

# ===== Hu·∫•n luy·ªán m√¥ h√¨nh =====
X = df_train.drop(columns=["customer_id", "churned"])
y = df_train["churned"]
model = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
model.fit(X, y)

# ===== ƒê√°nh gi√° m√¥ h√¨nh tr√™n t·∫≠p hu·∫•n luy·ªán =====
st.subheader("üìã ƒê√°nh gi√° m√¥ h√¨nh tr√™n d·ªØ li·ªáu hu·∫•n luy·ªán")
y_pred = model.predict(X)
st.text(classification_report(y, y_pred, target_names=["Gi·ªØ l·∫°i", "R·ªùi b·ªè"]))

# ===== Upload d·ªØ li·ªáu d·ª± ƒëo√°n =====
st.subheader("üì• T·∫£i d·ªØ li·ªáu CSV ƒë·ªÉ d·ª± ƒëo√°n (tu·ª≥ ch·ªçn)")
uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv", key="csv_upload")

if uploaded_file is not None:
    df_predict_raw = pd.read_csv(uploaded_file)
    st.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu d·ª± ƒëo√°n.")
else:
    df_predict_raw = load_predict_data()
    st.info("üß™ ƒêang d√πng d·ªØ li·ªáu m·∫´u.")

st.subheader("üìÑ D·ªØ li·ªáu c·∫ßn d·ª± ƒëo√°n (g·ªëc)")
st.dataframe(df_predict_raw)

# ===== Ti·ªÅn x·ª≠ l√Ω b·∫£n sao =====
df_predict = df_predict_raw.copy()
if 'gender' in df_predict.columns:
    df_predict['gender'] = df_predict['gender'].map({'Male': 0, 'Female': 1})
if 'num_txn_30d' in df_predict.columns:
    df_predict['is_active'] = df_predict['num_txn_30d'].apply(lambda x: 1 if x > 0 else 0)

# ===== D·ª± ƒëo√°n & x√°c su·∫•t =====
X_new = df_predict.drop(columns=["customer_id"])
df_predict_raw["Churn D·ª± ƒëo√°n"] = model.predict(X_new)
probs = model.predict_proba(X_new)
df_predict_raw["X√°c su·∫•t r·ªùi b·ªè (%)"] = (probs[:, 1] * 100).round(2)

# ===== Hi·ªÉn th·ªã k·∫øt qu·∫£ =====
st.subheader("üìä K·∫øt qu·∫£ d·ª± ƒëo√°n")
df_show = df_predict_raw[["customer_id", "Churn D·ª± ƒëo√°n", "X√°c su·∫•t r·ªùi b·ªè (%)"]].sort_values(by="X√°c su·∫•t r·ªùi b·ªè (%)", ascending=False)
st.dataframe(df_show)

# ===== Bi·ªÉu ƒë·ªì tr√≤n t·ªïng th·ªÉ =====
pie_data = df_predict_raw["Churn D·ª± ƒëo√°n"].value_counts().rename(index={0: "Gi·ªØ l·∫°i", 1: "R·ªùi b·ªè"}).reset_index()
pie_data.columns = ["Tr·∫°ng th√°i", "S·ªë l∆∞·ª£ng"]

fig = px.pie(
    pie_data,
    names="Tr·∫°ng th√°i",
    values="S·ªë l∆∞·ª£ng",
    title="üìà T·ª∑ l·ªá kh√°ch h√†ng d·ª± ƒëo√°n r·ªùi b·ªè"
)
st.plotly_chart(fig)

# ===== Bi·ªÉu ƒë·ªì thanh Top 5 nguy c∆° cao =====
st.subheader("üî• Top 5 kh√°ch h√†ng nguy c∆° r·ªùi b·ªè cao nh·∫•t")
top5 = df_show.head(5)
fig_bar = px.bar(
    top5,
    x="customer_id",
    y="X√°c su·∫•t r·ªùi b·ªè (%)",
    color="X√°c su·∫•t r·ªùi b·ªè (%)",
    color_continuous_scale="Reds",
    title="Top 5 kh√°ch h√†ng c√≥ x√°c su·∫•t r·ªùi b·ªè cao nh·∫•t"
)
st.plotly_chart(fig_bar)
